<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Avro Schema Documentation</title>
    <style>{{{styles}}}</style>
    <script>
     function toggleCollapse(button) {
        const childNodes = button.nextElementSibling;
        if (childNodes) {
            childNodes.classList.toggle('hidden');
        }
    }
    function showSchema(index) {
     function toggleCollapse(button) {
        const childNodes = button.nextElementSibling;
        if (childNodes) {
            childNodes.classList.toggle('hidden');
        }
    }
    function showSchema(index) {
            const schemaContent = document.getElementById('schemas-data').innerHTML;
            const schemas = JSON.parse(schemaContent);
            const schema = schemas[index].item;
            const schema = schemas[index].item;
            if (schema == null) {
                return;
            }
            
            const content = document.getElementById('schema-content');

            function getArrayType(field){
                var arrayLevel = '[]';
                function getType (innerField) {
                    if(innerField?.type == "array"){
                        arrayLevel = `${arrayLevel}[]`;
                        return getType(innerField.items);
                    }
                    return `${innerField?.name ||innerField?.type || innerField}${arrayLevel}`;
                }
                return getType(field.type.items);
            }

            function getEnumString(enumValues){
                return enumValues.map(item => `"${item}"`).join(", ");
            }

            function getFieldsTable(fields) {
            
                return fields.map(field => {
                    if(Array.isArray(field.type) && field.type[1]?.type === 'enum') {
                         return `<tr>
                        <td class="p-4 border-b border-blue-gray-50">${field.type[1].name}</td>
                        <td class="p-4 border-b border-blue-gray-50" whitespace-normal>"null", ${getEnumString(field.type[1].symbols)}</td>
                        <td class="p-4 border-b border-blue-gray-50 whitespace-normal">${field.doc || ''}</td>
                                    </tr>`;
                    }

                    if(Array.isArray(field.type) && field.type[1]?.type === 'record') {
                         return `<tr>
                        <td class="p-4 border-b border-blue-gray-50">${field.type[1].name}</td>
                        <td class="p-4 border-b border-blue-gray-50" whitespace-normal>null, ${field.type[1].name}</td>
                        <td class="p-4 border-b border-blue-gray-50 whitespace-normal">${field.doc || ''}</td>
                                    </tr>`;
                    }

                    if(Array.isArray(field.type) && field.type[1]?.type === 'array') {
                        const arrayType = getArrayType(field.type[1])
                            return `<tr>
                        <td class="p-4 border-b border-blue-gray-50">${field.type[1].name}</td>
                        <td class="p-4 border-b border-blue-gray-50" whitespace-normal>null, ${arrayType}</td>
                        <td class="p-4 border-b border-blue-gray-50 whitespace-normal">${field.doc || ''}</td>
                                    </tr>`;
                    }

                    if(field.type?.type === 'enum'){
                            return `<tr>
                        <td class="p-4 border-b border-blue-gray-50">${field.name}</td>
                        <td class="p-4 border-b border-blue-gray-50" whitespace-normal>${getEnumString(field.type.symbols)}</td>
                        <td class="p-4 border-b border-blue-gray-50 whitespace-normal">${field.doc || ''}</td>
                                    </tr>`;
                    }
                    if(field.type?.type === 'array'){
                        const arrayType = getArrayType(field)
                            return `<tr>
                        <td class="p-4 border-b border-blue-gray-50">${field.name}</td>
                        <td class="p-4 border-b border-blue-gray-50" whitespace-normal>${arrayType}</td>
                        <td class="p-4 border-b border-blue-gray-50 whitespace-normal">${field.doc || ''}</td>
                                    </tr>`;
                    }

                    return `
                    <tr>
                        <td class="p-4 border-b border-blue-gray-50">${field.name}</td>
                        <td class="p-4 border-b border-blue-gray-50" whitespace-normal>${field.type.name || field.type}</td>
                        <td class="p-4 border-b border-blue-gray-50 whitespace-normal">${field.doc || ''}</td>
                    </tr>
                `}).join('');
            };

            let fieldsHtml = getFieldsTable(schema.fields);
            let dictionariesHtml = '';
            schema.fieldDescriptions.forEach(fieldDescription => {
                if ( fieldDescription.type === 'record') {
                    dictionariesHtml += `
                        <h3 class="block font-sans text-2xl antialiased font-semibold leading-snug tracking-normal text-inherit pt-4 pb-2">${fieldDescription.name}</h3>
                        <div class="relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-xl bg-clip-border">
                            <table class="tw-full text-left table-auto">
                                <thead>
                                    <tr>
                                        <th class="p-4 border-b border-blue-gray-100 bg-blue-gray-50">Name</th>
                                        <th class="p-4 border-b border-blue-gray-100 bg-blue-gray-50">Type</th>
                                        <th class="p-4 border-b border-blue-gray-100 bg-blue-gray-50">Description</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">   
                                    ${getFieldsTable(fieldDescription.fields)}
                                </tbody>
                            </table>
                        </div>
                    `;
                }
            });
            
            content.innerHTML = `
                <h2 class="block font-sans text-3xl antialiased font-semibold leading-snug tracking-normal text-inherit">${schema.name} v.${schema.version}</h2>
                <div class="relative flex flex-col w-full h-full text-gray-700 bg-white shadow-md rounded-xl bg-clip-border">
                    <table class="tw-full text-left table-auto">
                        <thead>
                            <tr>
                                <th class="p-4 border-b border-blue-gray-100 bg-blue-gray-50">Name</th>
                                <th class="p-4 border-b border-blue-gray-100 bg-blue-gray-50">Type</th>
                                <th class="p-4 border-b border-blue-gray-100 bg-blue-gray-50">Description</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">   
                            ${fieldsHtml}
                        </tbody>
                    </table>
                </div>

                ${dictionariesHtml}
                `;
        }

        document.addEventListener('DOMContentLoaded', () => {
            const schemaLinks = document.querySelectorAll('.schema-link');
            schemaLinks.forEach(link => {
                link.addEventListener('click', (event) =>{
                    event.preventDefault();
                    const index = parseInt(link.getAttribute("data-index") || "-1", 10);
                    if (index >= 0) {
                        showSchema(index);
                    }
                });
            });
        });
    </script>
</head>

<body class="bg-gray-100 font-sans leading-normal tracking-normal">

    <div class="flex min-h-screen">
        <div class="w-1/4 bg-gray-800 text-white p-4">
            <h2 class="block font-sans text-3xl antialiased font-semibold leading-snug tracking-normal text-inherit">Schemas</h2>
            <ul id="events-list" class="space-y-2 pt-4">
                {{#groupedSchemas}}
                 <a
                    data-twe-collapse-init
                    href="#collapse{{groupName}}"
                    role="button"
                    aria-expanded="false"
                    aria-controls="collapse{{groupName}}"
                    onclick="toggleCollapse(this)"
                    class="flex items-center px-2 hover:bg-secondary-100 focus:text-primary active:text-primary">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="2.5"
                        stroke="currentColor"
                        class="h-4 w-4">
                        <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="M8.25 4.5l7.5 7.5-7.5 7.5" />
                    </svg>
                    {{#groupName}}{{groupName}}{{/groupName}}
                </a>
                <ul
                    class="!visible hidden"
                    id="collapse{{groupName}}"
                    data-twe-collapse-item>
                {{#schemas}}
                        
                    <li class="mb-2 px-6">
                        <a href="#" 
                        class="schema-link ml-4 px-2 hover:bg-secondary-100"
                        data-index="{{index}}">
                            {{#item}}
                                {{schemaName}}{{#version}} v.{{version}}{{/version}}
                            {{/item}}
                        </a>
                    </li>
                        
                {{/schemas}}
                </ul>
            {{/groupedSchemas}}
                </ul>
            {{/groupedSchemas}}
            </ul>

        </div>

        <div class="flex-1 bg-white p-8">
            <div id="schema-content">
                <p>Select a schema from the sidebar.</p>
            </div>
        </div>
    </div>

    <script id="schemas-data" type="application/json">{{{schemasString}}}</script>

</body>

</html>